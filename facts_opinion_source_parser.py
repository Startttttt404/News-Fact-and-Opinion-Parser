import re
import argparse

from baml_client import b
from baml_client import reset_baml_env_vars
from baml_client.types import Source
from baml_client.types import ContentType


def find_source(content: str) -> str:
    """Returns the source of a given text file using GenAI. Valid sources are CNN, BBC, and Reddit.

    Args:
        content (str): A string of the text content. Should be formatted such that there is single newlines between lines.

    Returns:
        str: Either CNN, BBC, Reddit, or unknown source depending on the LLM's output.
    """
    
    match (b.IdentifySource(content)):
        case Source.CNN:
            return "CNN"
        case Source.BBC:
            return "BBC"
        case Source.REDDIT:
            return "Reddit"
        case Source.UNKNOWN:
            return "Unknown Source"
            
def extract_facts(lines: list[str]) -> list[str]:
    """Returns a list of determined facts from a given list of strings using GenAI.

    Args:
        lines (list[str]): A list of strings. Typically generated by get_lines

    Returns:
        list[str]: A list of determined facts based on the LLM's output, will be a subset of lines.
    """
    
    facts = []
    
    for line in lines:
        if b.IdentifyContentType(line) is ContentType.FACT:
            facts.append(line)
            
    return facts

def extract_opinions(lines: list[str]) -> list[str]:
    """Returns a list of determined opnions from a given list of strings using GenAI.

    Args:
        lines (list[str]): A list of strings. Typically generated by get_lines

    Returns:
        list[str]: A list of determined opinions based on the LLM's output, will be a subset of lines.
    """
    
    opinions = []
    
    for line in lines:
        if b.IdentifyContentType(line) is ContentType.OPINION:
            opinions.append(line)
            
    return opinions

def get_lines(content: str) -> list[str]:
    """Returns a list of strings to be used with extract_opinions or extract_facts. Will include both full lines containing quotes and the content of the quotes themselves, as the full quote line is always a fact (technically).

    Args:
        content (str): A block of content as a string, could be from a news article.

    Returns:
        list[str]: a list of strings from a block of content. 
    """
    lines = content.split("\n")
    return_lines = []
    
    for line in lines:
        return_lines.append(line)
        # No " in the regex, as then we would get half quotes half supporting text
        parse = re.findall("\"[^\"]*\"", line)
        if len(parse) > 0 and not parse[0] == line:
            return_lines.append("\"" + " ".join(parse).replace("\"", "") + "\"")
            
    return return_lines

def main():
    parser = argparse.ArgumentParser(prog="Fact_Opinion_Parser", description="Lists Facts and Opinions from Text")
    parser.add_argument("filename")
    parser.add_argument("key")
    args = parser.parse_args()
    
    # so baml can use YOUR api key (no leaks today)
    reset_baml_env_vars({"OPENAI_API_KEY" :args.key})
    
    content = "".join(open(args.filename, "r", encoding='utf-8', errors='ignore').readlines())
    
    source = find_source(content)
    lines = get_lines(content)
    facts = extract_facts(lines)
    opinions = extract_opinions(lines)

    print(f"Source: {source}")    
    
    print(f"\nFacts are:")
    for i, fact in enumerate(facts):
        print(f"{i+1}. {fact}")
    
    print(f"\nOpinions are:")
    for i, opinion in enumerate(opinions):
        print(f"{i+1}. {opinion}")
    
if __name__ == "__main__":
    main()